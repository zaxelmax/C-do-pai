Yo.
Compilado de todos os conteúdos trabalhados até agora.
Basicamente, todas as aulas serão separadas aqui e explcadas.
O formato será:

//Título da Aula
Definição / Explicação do conteúdo abordado
Importância e usos.

------------------------------------------------------------------
|////////////////////////////////////////////////////////////////|
|////////////////////////////////////////////////////////////////|
|////////////////////////////////////////////////////////////////|
|////////////////////////////////////////////////////////////////|
|////////////////////////////////////////////////////////////////|
|////////////////////////////////////////////////////////////////|
------------------------------------------------------------------


~~~~Aula 01 : Introdução e Instalação.~~~~

Aprendemos como ajustar as variáveis de ambiente, usar o vs code e mexer no terminal.
Introduzimos o Hello, World!

~~~~Aula 02 : Criando um programa .Net~~~~

Ainda não foi muito útil, pois eu não estou com foco em .Net por enquanto.
Criamos um programa .Net usando o terminal.

~~~~Aula 04 : Escopo de variáveis~~~~

Vou colocar aqui também o da aula 03, que foi a aula sobre variáveis.

Os tipos de variáveis integrais que existem em C# são:
sbyte       -128 ~ 127
byte        0 ~ 255
short       -32768 ~ 32767
ushort      0 ~ 65.535
int         -2.147.483.648 ~ 2.147.483.647
uint        0 ~ 4.294.967.295
long        -9.223.372.036.854.775.808 ~ 9.223.372.036.854.775.807
ulong       0 ~ 18.446.744.073.709.551.615
char        0 ~ 65535 NOTA: Valores em UNICODE.

           | Embora char seja classificado como integral,       |
           | ele é diferente dos demais em duas características:|
           | Não há conversão implicita para Char.              |
           | Constantes do tipo char devem ser escritas como Li-|
           | terais, sejam eles Inteiros ou Caracteres.         |


O escopo de variáveis é associado a quem consegue enxergá-las.
Variáveis declaradas dentro de um método serão somente enxergadas por este método, por exemplo.
Variáveis declaradas dentro de classes serão enxergadas por todos os métodos e construtores dentro desta classe.
E assim sucessivamente, seguindo uma ordem hierárquica de aninhamento.

~~~~Aula 05 : Operadores e Operações~~~~

Conceitos básicos como sinais de operação e controle de valores das variáveis.
>=, +=, *=, /=, -=, etc.

~~~~Aula 06 : Formatar Console.Write~~~~

Existem alguns formatadores para as saídas.
/n quebra a linha, /t insere uma tabulação.
{U}, U ∈ N, representa a posição da variável que será impressa na tela.
{U,X}, com U ∈ N e X ∈ N, representam a variável impressa + uma quantidade
X de espaços dados. Ótimo para organizar o código. 
Existem DEZENAS de modificadores para isto, seguem abaixo:

  -----------------------------------------------------------------------------------
  | Format a negative integer or floating-point number in various ways.             |
  |     Console.WriteLine("Standard Numeric Format Specifiers");                    |
  |     Console.WriteLine(                                                          |
  |         "(C) Currency: . . . . . . . . {0:C}\n" +                               |
  |         "(D) Decimal:. . . . . . . . . {0:D}\n" +                               |
  |         "(E) Scientific: . . . . . . . {1:E}\n" +                               |
  |         "(F) Fixed point:. . . . . . . {1:F}\n" +                               |
  |         "(G) General:. . . . . . . . . {0:G}\n" +                               |
  |         "    (default):. . . . . . . . {0} (default = 'G')\n" +                 |
  |         "(N) Number: . . . . . . . . . {0:N}\n" +                               |
  |         "(P) Percent:. . . . . . . . . {1:P}\n" +                               |
  |         "(R) Round-trip: . . . . . . . {1:R}\n" +                               |
  |         "(X) Hexadecimal:. . . . . . . {0:X}\n",                                |
  |         -123, -123.45f);                                                        |
  |                                                                                 |
  |     // Format the current date in various ways.                                 |
  |     Console.WriteLine("Standard DateTime Format Specifiers");                   |
  |     Console.WriteLine(                                                          |
  |         "(d) Short date: . . . . . . . {0:d}\n" +                               |     
  |         "(D) Long date:. . . . . . . . {0:D}\n" +                               |
  |         "(t) Short time: . . . . . . . {0:t}\n" +                               |
  |         "(T) Long time:. . . . . . . . {0:T}\n" +                               |
  |         "(f) Full date/short time: . . {0:f}\n" +                               |
  |         "(F) Full date/long time:. . . {0:F}\n" +                               |
  |         "(g) General date/short time:. {0:g}\n" +                               |
  |         "(G) General date/long time: . {0:G}\n" +                               |
  |         "    (default):. . . . . . . . {0} (default = 'G')\n" +                 |
  |         "(M) Month:. . . . . . . . . . {0:M}\n" +                               |
  |         "(R) RFC1123:. . . . . . . . . {0:R}\n" +                               |
  |         "(s) Sortable: . . . . . . . . {0:s}\n" +                               |
  |         "(u) Universal sortable: . . . {0:u} (invariant)\n" +                   |
  |         "(U) Universal full date/time: {0:U}\n" +                               |
  |         "(Y) Year: . . . . . . . . . . {0:Y}\n",                                |
  |         thisDate);                                                              |
  |                                                                                 |
  |     // Format a Color enumeration value in various ways.                        |
  |     Console.WriteLine("Standard Enumeration Format Specifiers");                |
  |     Console.WriteLine(                                                          |
  |         "(G) General:. . . . . . . . . {0:G}\n" +                               |  
  |         "    (default):. . . . . . . . {0} (default = 'G')\n" +                 |
  |         "(F) Flags:. . . . . . . . . . {0:F} (flags or integer)\n" +            |
  |         "(D) Decimal number: . . . . . {0:D}\n" +                               |
  |         "(X) Hexadecimal:. . . . . . . {0:X}\n",                                |
  |         Color.Green);                                                           |
  -----------------------------------------------------------------------------------

  Resultados:
  Standard Numeric Format Specifiers
(C) Currency: . . . . . . . . ($123.00)
(D) Decimal:. . . . . . . . . -123
(E) Scientific: . . . . . . . -1.234500E+002
(F) Fixed point:. . . . . . . -123.45
(G) General:. . . . . . . . . -123
    (default):. . . . . . . . -123 (default = 'G')
(N) Number: . . . . . . . . . -123.00
(P) Percent:. . . . . . . . . -12,345.00 %
(R) Round-trip: . . . . . . . -123.45
(X) Hexadecimal:. . . . . . . FFFFFF85

Standard DateTime Format Specifiers
(d) Short date: . . . . . . . 6/26/2004
(D) Long date:. . . . . . . . Saturday, June 26, 2004
(t) Short time: . . . . . . . 8:11 PM
(T) Long time:. . . . . . . . 8:11:04 PM
(f) Full date/short time: . . Saturday, June 26, 2004 8:11 PM
(F) Full date/long time:. . . Saturday, June 26, 2004 8:11:04 PM
(g) General date/short time:. 6/26/2004 8:11 PM
(G) General date/long time: . 6/26/2004 8:11:04 PM
    (default):. . . . . . . . 6/26/2004 8:11:04 PM (default = 'G')
(M) Month:. . . . . . . . . . June 26
(R) RFC1123:. . . . . . . . . Sat, 26 Jun 2004 20:11:04 GMT
(s) Sortable: . . . . . . . . 2004-06-26T20:11:04
(u) Universal sortable: . . . 2004-06-26 20:11:04Z (invariant)
(U) Universal full date/time: Sunday, June 27, 2004 3:11:04 AM
(Y) Year: . . . . . . . . . . June, 2004

Standard Enumeration Format Specifiers
(G) General:. . . . . . . . . Green
    (default):. . . . . . . . Green (default = 'G')
(F) Flags:. . . . . . . . . . Green (flags or integer)
(D) Decimal number: . . . . . 3
(X) Hexadecimal:. . . . . . . 00000003

~~~~ Aula 07 : Constantes ~~~~

Existe a possibilidade de guardar espaços de memória com valores
que não vão mudar durante o código.
Esses valores são as Constantes.
Salvar um valor com a garantia de que ele não será mudado, não importa o quê
é muito importante da perspectiva geral de um projeto.
Note que constantes possuem valor determinado em tempo de compilação, não de execução.
Costuma-se chamar variáveis somente leitura de constantes, mas como
sua definição ocorre em tempo de execução elas não são constantes propriamente ditas.

As constantes não devem ser confundidas com literais.
Literais são valores imutáveis, mas que não precisam ser atribuidos.
Eles simplesmente existem, como o número 8.2f.

A constante não existe naturalmente, já o literal, sim.

~~~~ Aula 08 : Console Read / ReadLine~~~~

O console Read é um método que lê o próximo caractere que for inserido no fluxo de entrada
padrão. Ele, por default, lê um tipo Char. 

Já o Console.ReadLine, por sua vez, lê a linha de caracteres que for inserido no fluxo de entrada.

~~~~ Aula 09 : Operações em BitWise~~~~

Vou ser bem sério, relativamente inútil por um bom tempo.
Basicamente são Operadores para alterar os binários inseridos.

Servem para dar um shift para a esquerda ou para a direita nos binários.
Útil para compressão e criptografia de arquivos.

~~~~ Aula 10 : ENUM~~~~

Enum's são tipos enumeradores.
Eles servem, num geral, para salvar constantes.


