Yo.
Compilado de todos os conteúdos trabalhados até agora.
Basicamente, todas as aulas serão separadas aqui e explcadas.
O formato será:

//Título da Aula
Definição / Explicação do conteúdo abordado
Importância e usos.

------------------------------------------------------------------
|////////////////////////////////////////////////////////////////|
|////////////////////////////////////////////////////////////////|
|////////////////////////////////////////////////////////////////|
|////////////////////////////////////////////////////////////////|
|////////////////////////////////////////////////////////////////|
|////////////////////////////////////////////////////////////////|
------------------------------------------------------------------


~~~~Aula 01 : Introdução e Instalação.~~~~

Aprendemos como ajustar as variáveis de ambiente, usar o vs code e mexer no terminal.
Introduzimos o Hello, World!

~~~~Aula 02 : Criando um programa .Net~~~~

Ainda não foi muito útil, pois eu não estou com foco em .Net por enquanto.
Criamos um programa .Net usando o terminal.

~~~~Aula 04 : Escopo de variáveis~~~~

Vou colocar aqui também o da aula 03, que foi a aula sobre variáveis.

Os tipos de variáveis integrais que existem em C# são:
sbyte       -128 ~ 127
byte        0 ~ 255
short       -32768 ~ 32767
ushort      0 ~ 65.535
int         -2.147.483.648 ~ 2.147.483.647
uint        0 ~ 4.294.967.295
long        -9.223.372.036.854.775.808 ~ 9.223.372.036.854.775.807
ulong       0 ~ 18.446.744.073.709.551.615
char        0 ~ 65535 NOTA: Valores em UNICODE.

           | Embora char seja classificado como integral,       |
           | ele é diferente dos demais em duas características:|
           | Não há conversão implicita para Char.              |
           | Constantes do tipo char devem ser escritas como Li-|
           | terais, sejam eles Inteiros ou Caracteres.         |


O escopo de variáveis é associado a quem consegue enxergá-las.
Variáveis declaradas dentro de um método serão somente enxergadas por este método, por exemplo.
Variáveis declaradas dentro de classes serão enxergadas por todos os métodos e construtores dentro desta classe.
E assim sucessivamente, seguindo uma ordem hierárquica de aninhamento.

~~~~Aula 05 : Operadores e Operações~~~~

Conceitos básicos como sinais de operação e controle de valores das variáveis.
>=, +=, *=, /=, -=, etc.

~~~~Aula 06 : Formatar Console.Write~~~~

Existem alguns formatadores para as saídas.
/n quebra a linha, /t insere uma tabulação.
{U}, U ∈ N, representa a posição da variável que será impressa na tela.
{U,X}, com U ∈ N e X ∈ N, representam a variável impressa + uma quantidade
X de espaços dados. Ótimo para organizar o código. 
Existem DEZENAS de modificadores para isto, seguem abaixo:

  -----------------------------------------------------------------------------------
  | Format a negative integer or floating-point number in various ways.             |
  |     Console.WriteLine("Standard Numeric Format Specifiers");                    |
  |     Console.WriteLine(                                                          |
  |         "(C) Currency: . . . . . . . . {0:C}\n" +                               |
  |         "(D) Decimal:. . . . . . . . . {0:D}\n" +                               |
  |         "(E) Scientific: . . . . . . . {1:E}\n" +                               |
  |         "(F) Fixed point:. . . . . . . {1:F}\n" +                               |
  |         "(G) General:. . . . . . . . . {0:G}\n" +                               |
  |         "    (default):. . . . . . . . {0} (default = 'G')\n" +                 |
  |         "(N) Number: . . . . . . . . . {0:N}\n" +                               |
  |         "(P) Percent:. . . . . . . . . {1:P}\n" +                               |
  |         "(R) Round-trip: . . . . . . . {1:R}\n" +                               |
  |         "(X) Hexadecimal:. . . . . . . {0:X}\n",                                |
  |         -123, -123.45f);                                                        |
  |                                                                                 |
  |     // Format the current date in various ways.                                 |
  |     Console.WriteLine("Standard DateTime Format Specifiers");                   |
  |     Console.WriteLine(                                                          |
  |         "(d) Short date: . . . . . . . {0:d}\n" +                               |     
  |         "(D) Long date:. . . . . . . . {0:D}\n" +                               |
  |         "(t) Short time: . . . . . . . {0:t}\n" +                               |
  |         "(T) Long time:. . . . . . . . {0:T}\n" +                               |
  |         "(f) Full date/short time: . . {0:f}\n" +                               |
  |         "(F) Full date/long time:. . . {0:F}\n" +                               |
  |         "(g) General date/short time:. {0:g}\n" +                               |
  |         "(G) General date/long time: . {0:G}\n" +                               |
  |         "    (default):. . . . . . . . {0} (default = 'G')\n" +                 |
  |         "(M) Month:. . . . . . . . . . {0:M}\n" +                               |
  |         "(R) RFC1123:. . . . . . . . . {0:R}\n" +                               |
  |         "(s) Sortable: . . . . . . . . {0:s}\n" +                               |
  |         "(u) Universal sortable: . . . {0:u} (invariant)\n" +                   |
  |         "(U) Universal full date/time: {0:U}\n" +                               |
  |         "(Y) Year: . . . . . . . . . . {0:Y}\n",                                |
  |         thisDate);                                                              |
  |                                                                                 |
  |     // Format a Color enumeration value in various ways.                        |
  |     Console.WriteLine("Standard Enumeration Format Specifiers");                |
  |     Console.WriteLine(                                                          |
  |         "(G) General:. . . . . . . . . {0:G}\n" +                               |  
  |         "    (default):. . . . . . . . {0} (default = 'G')\n" +                 |
  |         "(F) Flags:. . . . . . . . . . {0:F} (flags or integer)\n" +            |
  |         "(D) Decimal number: . . . . . {0:D}\n" +                               |
  |         "(X) Hexadecimal:. . . . . . . {0:X}\n",                                |
  |         Color.Green);                                                           |
  -----------------------------------------------------------------------------------

  Resultados:
  Standard Numeric Format Specifiers
(C) Currency: . . . . . . . . ($123.00)
(D) Decimal:. . . . . . . . . -123
(E) Scientific: . . . . . . . -1.234500E+002
(F) Fixed point:. . . . . . . -123.45
(G) General:. . . . . . . . . -123
    (default):. . . . . . . . -123 (default = 'G')
(N) Number: . . . . . . . . . -123.00
(P) Percent:. . . . . . . . . -12,345.00 %
(R) Round-trip: . . . . . . . -123.45
(X) Hexadecimal:. . . . . . . FFFFFF85

Standard DateTime Format Specifiers
(d) Short date: . . . . . . . 6/26/2004
(D) Long date:. . . . . . . . Saturday, June 26, 2004
(t) Short time: . . . . . . . 8:11 PM
(T) Long time:. . . . . . . . 8:11:04 PM
(f) Full date/short time: . . Saturday, June 26, 2004 8:11 PM
(F) Full date/long time:. . . Saturday, June 26, 2004 8:11:04 PM
(g) General date/short time:. 6/26/2004 8:11 PM
(G) General date/long time: . 6/26/2004 8:11:04 PM
    (default):. . . . . . . . 6/26/2004 8:11:04 PM (default = 'G')
(M) Month:. . . . . . . . . . June 26
(R) RFC1123:. . . . . . . . . Sat, 26 Jun 2004 20:11:04 GMT
(s) Sortable: . . . . . . . . 2004-06-26T20:11:04
(u) Universal sortable: . . . 2004-06-26 20:11:04Z (invariant)
(U) Universal full date/time: Sunday, June 27, 2004 3:11:04 AM
(Y) Year: . . . . . . . . . . June, 2004

Standard Enumeration Format Specifiers
(G) General:. . . . . . . . . Green
    (default):. . . . . . . . Green (default = 'G')
(F) Flags:. . . . . . . . . . Green (flags or integer)
(D) Decimal number: . . . . . 3
(X) Hexadecimal:. . . . . . . 00000003

~~~~ Aula 07 : Constantes ~~~~

Existe a possibilidade de guardar espaços de memória com valores
que não vão mudar durante o código.
Esses valores são as Constantes.
Salvar um valor com a garantia de que ele não será mudado, não importa o quê
é muito importante da perspectiva geral de um projeto.
Note que constantes possuem valor determinado em tempo de compilação, não de execução.
Costuma-se chamar variáveis somente leitura de constantes, mas como
sua definição ocorre em tempo de execução elas não são constantes propriamente ditas.

As constantes não devem ser confundidas com literais.
Literais são valores imutáveis, mas que não precisam ser atribuidos.
Eles simplesmente existem, como o número 8.2f.

A constante não existe naturalmente, já o literal, sim.

~~~~ Aula 08 : Console Read / ReadLine~~~~

O console Read é um método que lê o próximo caractere que for inserido no fluxo de entrada
padrão. Ele, por default, lê um tipo Char. 

Já o Console.ReadLine, por sua vez, lê a linha de caracteres que for inserido no fluxo de entrada.

~~~~ Aula 09 : Operações em BitWise~~~~

Vou ser bem sério, relativamente inútil por um bom tempo.
Basicamente são Operadores para alterar os binários inseridos.

Servem para dar um shift para a esquerda ou para a direita nos binários.
Útil para compressão e criptografia de arquivos.

~~~~ Aula 10 : ENUM~~~~

Enum's são tipos enumeradores.
Eles servem, num geral, para atribuir constantes a variáveis específicas.
Porém, em C#, Enum's não podem abrigar valores do tipo String ou Char.
Aceita: sbyte, byte, ushort, short, uint, int, ulong e long.

Eles são úteis para atribuir ordenadores ou identificadores, por exemplo.

Para o caso de Strings, deve-se usar: Public static readonly string "nome_da_string".
Não se recomenda o uso de constantes, pois constantes são incorporadas a todas as partes do código,
enquanto o readonly string apenas apontará para onde existe a referência.

Enum's aceitam modificadores como as classes. New, Public, Protected, Private e Internal são aceitos.

~~~~  Aula 11 : TypeCast ~~~~

O TypeCast é uma ferramenta para "conjurar" um tipo A a partir de um elemento do tipo B.

A string "29384" pode ser conjurada para um int de vlor 29384, por exemplo.

O compilador não é burro, então para que o TypeCast seja bem sucedido é necessário que a variável tenha uma estrutura
condizente com o cast solicitado.

~~~~  Aula 12, 13 e 14 : Condicional IF, If-Else e If Aninhado~~~~

Um condicional If é uma expressão que necessita de um parâmetro com estrutura lógica para existir.

Não existe, por exemplo, if(){}. O if pode ou não possuir um Else associado. Caso exista um if-else, a expressão é tratada
de forma booleana e dois caminhos distintos podem ser tomados(ou até mesmo dois caminhos iguais).

Existe o operador ternário ?: . O operador possui a seguinte estrutura:

"condição" ? "Verdadeiro" : "Falso"
Por exemplo:

int i = 1;
i < 20? "Pequeno" : "Grande" 
A saída será Pequeno.

O if pode ser colocado dentro de outros if's, como uma cascata de condições.

Por exemplo:
Int a=1, b=2, c=3, d=4;
if(a==1){
    Console.WriteLine("Imprimiu o 1);
    if(b==2){
        Console.WriteLine("Imprimiu o 2);
        if(c==3){
            Console.WriteLine("Imprimiu o 3);
                if(d==4){
                    Console.WriteLine("Imprimiu o 4);
                        }
                } 
            }
        }
A ordem de execução é de fora para dentro, consequentemente a impressão será:
Imprimiu o 1
Imprimiu o 2
Imprimiu o 3
Imprimiu o 4

Dessa mesma forma podem ser usados else's.

~~~~  Aula 15 : Switch Case ~~~~

O switch case é, assim como as extensões do If, uma estrutura que analisa uma condição e executa uma função a partir da análise.
Diferentemente do If, que analisa se uma proposição ou um conjunto delas formam algo verdadeiro ou falso, o switch pode possuir 
diversas análises em uma mesma estrutura.

Sintaxe:
Switch(Variável/Retorno)
case : "a"{
~execução
break;
}
case : "b"{
~execução
break;
}

default {
~execução
    break;
}

O default ocorre quando nenhum dos casos anteriormente atribuidos retorna um true na verificação.

~~~~ Aula 16 : GO TO ~~~~

O goto é utilizado para "saltar" na execução de um código.
Como o próprio nome diz, ele vai saltar para uma linha indicada.
A indicação dessa linha pode ocorrer antes ou depois do goto.

Sintaxe: 

Ponto de retorno:
    Código a ser executado;

goto
    Ponto de retorno;

O uso de goto não é recomendado, pois ele cria problemas nos padrões de projeto
Um código que possui grande quantidade de goto não tem uma boa legibilidade, costuma
apresentar bugs complcados de serem encontrados e não é consideravelmente rápido,
como um código no qual as estruturas de fluxo de dados utilizadas são laços, como 
o while ou o for.

~~~~ Aula 17 e 18: Arrays e Matrizes. ~~~~

Arrays ou vetores são entidades de programação com a capacidade de acumular uma
ou mais informações. Os arrays representam espaços de memória guardados em conjunto,
de modo que seu acesso ocorre a partir do índice no qual a informação está/deverá estar.

Sintaxe: type "nomedoarray" = new type[array length]

Arrays costumam ser percorridos ou carregados usando for e criando as variáveis
de controle dentro do próprio for.
As sintaxes para declaração de arrays podem ser variadas:

type[] array  new type[size];
type[] array = new type[]{elements}
type[] array = {elements}
type[,] matrix = new type[a,b]
type[,] matrix = new type[,] {{1,2,3},{4,5,6}}
type[][] jaggedarray = new type[size][]
Nota: um jaggedarray é um array de arrays.

O operador new cria e instancializa um objeto de 
um determinado tipo. Ele separa um slot na memória
e cria o objeto a partir das características indicadas.

Existem alguns métodos que podem ser aplicados aos arrays: 
System.Array.Copy(arraybase, alvodacópia, quantidade de elementos a serem copiados [int]).

~~~~ Aulas 19,20,21,22 : For, While, Do While, Foreach. ~~~~

Laços de repetição têm, num geral, infinitos usos.
Eles podem ser utilizados para ler ou carregar arrays ou entrar em situações
recursivas, podem ser usados em conjunto com condicionais, etc.

O for é um laço interessante: suas variáveis de controle podem ser iniciadas na declaração
do próprio for e terão como escopo apenas o que está dentro do próprio for.

Sua sintaxe é: 

    for(type var;conditional expression using var;var iteration){
        code;
    }

Em type var temos:
Declaração e inicialização da variável ou somente condição de inicialização da variável.
Ele é executado somente uma vez, no momento em que o laço começará.

Em conditional expression using var temos:
Uma expressão de análise para saber se, após a primeira iteração, o for continuará sendo 
executado. Ela quase sempre está associada à variável declarada em type var.

Em var iteration temos:
Após cada iteração completa, a operação representada será executada.
Para que não exista um loop infinito, é necessário que a iteração
seja condizente com aa condição.

O While é um laço de repetição que não necessariamente executará a primeira ação.
Ele é bom quando não se sabe quantas vezes a ação deve ser executada, mas
sabe-se que a ação deve ser executada quando uma condição for satisfeita.

Sua sintaxe é:

    while(conditional expression or boolean method return){
        code;
    }
O while pode ser aninhado com estruturas de controle de fluxo como:
switch, if, else, do-while, etc.
O while também pode ser parado com uma condição a partir do uso do break.
Caso você precise pular a execução do código e executar a próxima iteração
do mesmo while, pode-se utilizar a expressão continue.

Do-While é um laço que irá obrigatoriamente iniciar uma execução.
Consequentemente, depois da primeira execução deve existir um critério de 
repetição, que será o while.
Sua sintaxe é:
    do{
        code;
    }while(condicional expression or boolean method return)


O Foreach é ótimo, perfeito, lindo e coisa e tal para ler/escrever/modificar
arrays, listas, dicionários, etc.
Para cada elemento(ou par) presente na coleção o Foreach executará o código.

Sua sintaxe é:

    foreach(type variável in coleção){
        code;
    
    }
Não se pode esquecer que a variável analisada em type será utilizada dentro do foreach.

~~~~ Aula 23 : Métodos para Arrays ~~~~

---------------------------------------------------------------------------
!!!!!!!!!Essa aula foi pulada, devo voltar daqui alguns semanas!!!!!!!!!!!!
---------------------------------------------------------------------------

~~~~Aula 24 : Métodos~~~~

Métodos são, em qualquer linguagem de programação, uma estrutura de código 
que realizará ou não operações e retornará ou não valores.
Ela pode ou não receber parâmetros de entrada.

                                                            Modificadores de Métodos
______________________________________________________________________________________________________________________________________________                                                            
||                                                                                                                                          ||
||public: O método pode ser acessado por qualquer código em qualquer lugar.                                                                 ||                                                                 
||                                                                                                                                          ||
||private: O método só pode ser acessado dentro da classe em que foi declarado.                                                             ||
||                                                                                                                                          ||
||protected: O método só pode ser acessado dentro da classe em que foi declarado ou em uma classe derivada da classe em que foi declarado.  ||
||                                                                                                                                          ||
||internal: O método só pode ser acessado dentro do mesmo assembly (arquivo DLL ou EXE).                                                    ||
||                                                                                                                                          ||
||protected internal: O método só pode ser acessado dentro do mesmo assembly ou por classes derivadas da classe em que foi declarado.       ||
||                                                                                                                                          ||
||Modificador de Especificação                                                                                                              ||
||                                                                                                                                          ||
||static: O método é um membro estático da classe e pode ser chamado sem criar uma instância da classe.                                     ||
||                                                                                                                                          ||
||virtual: O método pode ser sobrescrito em uma classe derivada.                                                                            ||
||                                                                                                                                          ||
||override: O método sobrescreve o método de uma classe base.                                                                               ||    
||                                                                                                                                          ||
||abstract: O método não tem implementação na classe base e deve ser implementado em uma classe derivada.                                   ||
||                                                                                                                                          ||
||sealed: O método não pode ser sobrescrito em classes derivadas.                                                                           ||
||                                                                                                                                          ||
||Modificador de Parâmetro                                                                                                                  ||                        ||
||                                                                                                                                          ||
||ref: Passa o parâmetro por referência. Qualquer alteração no valor do parâmetro dentro do método é refletida na variável original que foi ||
||passada como argumento.                                                                                                                   ||   
||                                                                                                                                          ||
||out: O parâmetro é usado para retornar um valor do método. O valor do parâmetro é indefinido no início do método e deve ser definido antes||
||do método retornar.                                                                                                                       ||
||                                                                                                                                          || 
||params: Permite que um número variável de argumentos seja passado para o método como um único parâmetro.                                  ||
||                                                                                                                                          ||
||this: Referencia o objeto atual dentro do método.                                                                                         ||
||                                                                                                                                          ||
||Modificadores de Variável                                                                                                                 ||
||                                                                                                                                          ||
||const: A variável é uma constante e não pode ser modificada após ser atribuída um valor.                                                  ||
||                                                                                                                                          ||
||readonly: A variável só pode ser atribuída um valor uma vez, normalmente no construtor da classe. Depois de atribuído um valor, a variável|| 
||se torna somente leitura.                                                                                                                 ||
||                                                                                                                                          ||
||volatile: A variável é armazenada na memória principal em vez de ser armazenada no cache do processador. Isso garante que o valor da var- ||
||iável seja atualizado imediatamente em todos os threads que acessam a variável.                                                           ||    
||                                                                                                                                          ||
||unsafe: Permite que código não seguro acesse a memória diretamente.                                                                       ||                         
||                                                                                                                                          ||
||                                                                                                                                          ||
______________________________________________________________________________________________________________________________________________

~~~~ Aula 25 : Passagem por valor e passagem por referência ~~~~

Como foi visto no tópico passado, é possível utilizar ref como parâmetro do método.

O uso de ref faz com que o parâmetro inserido seja enviado utilizando a referência dele e não seu valor, como 
consequência as mudanças realizadas serão direcionadas à variável e não ao retorno /execução do método.

~~~~ Aula 26 : Argumento out ~~~~

O modificador out é usado para indicar que um parâmetro de método é uma saída ou um valor de retorno, ou seja,
o valor do parâmetro será modificado dentro do método e a nova versão desse valor será retornada como resultado
do método. Dessa forma, o out é usado para retornar vários valores de um método, em vez de apenas um.

Sua sintaxe é:
        [ modificadores de método ] nome.do.método(parametro a, parametro b, out result, out result1){
            code;
        }
    O código deve atribuir valores para result e result 1 neste exemplo, consequentemente as variáveis associadas
que serão enviadas como parâmetro do método terão seu valor alterado.

~~~~ Aula 27 : Argumento Params ~~~~
O argumento params faz com que o método seja capaz de receber uma quantidade de valores sem saber quantos serão informados.
Por exemplo, se você tem um sistema de cadastro, mas não sabe quantos cadastros serão inseridos, o método de cadastro pode receber
um argumento com params e será carregado conforme a quantidade de entradas receber.

Sua sintaxe é:
        [modificadores de método] nome.do.método(params type[] var){
            code;
        }

~~~~ Aula 28 : Classes e Objetos ~~~~

Classe é um conceito fundamental na programação orientada a objetos e em C# não é diferente.
Uma classe é basicamente um modelo ou um molde que descreve a estrutura e o comportamento de um objeto. 
Em outras palavras, ela define as propriedades, métodos e eventos que um objeto deve ter.
Uma vez que temos uma classe definida, podemos criar objetos a partir dela. 

    
